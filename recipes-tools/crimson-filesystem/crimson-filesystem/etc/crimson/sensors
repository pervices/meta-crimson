#!/bin/bash

normal="\e[0m"
bold="\e[1m"

VOLTAGE=/sys/class/i2c-dev/i2c-0/device/0-004b
PWR_TMP=/sys/class/i2c-dev/i2c-0/device/0-0048
DIG_TMP=/sys/class/i2c-dev/i2c-0/device/0-0049

VOLTAGE_5V3_H=$(cat $VOLTAGE/in4_input)
VOLTAGE_5V5_H=$(cat $VOLTAGE/in5_input)
VOLTAGE_3V6_H=$(cat $VOLTAGE/in6_input)
VOLTAGE_3V3_H=$(cat $VOLTAGE/in7_input)

TEMP_5V3_V=$(cat $PWR_TMP/in4_input)
TEMP_5V5_V=$(cat $PWR_TMP/in5_input)
TEMP_3V6_V=$(cat $PWR_TMP/in6_input)
TEMP_3V3_V=$(cat $PWR_TMP/in7_input)

MAX_TEMP=80 #80 degree C
MIN_TEMP=0 #0 degree C

TEMP_DIG1=in4_input
TEMP_DIG2=in5_input

CONST1=2637
CONST2=13.6
CONST3=2

# formula to calculate temp: temp = (Voltage-2637mV)/(-13.6mV/C), thus 2637mV -> 0 degree C
# higher temp -> lower voltage
# lower temp -> higher voltage

TEMP_5V3_T=$(bc <<<"scale=2;($CONST1-$TEMP_5V3_V)/$CONST2")
TEMP_5V5_T=$(bc <<<"scale=2;($CONST1-$TEMP_5V5_V)/$CONST2")
TEMP_3V6_T=$(bc <<<"scale=2;($CONST1-$TEMP_3V6_V)/$CONST2")
TEMP_3V3_T=$(bc <<<"scale=2;($CONST1-$TEMP_3V3_V)/$CONST2")

case "$1" in
run)
	while true
	do
		if [[ "$VOLTAGE_5V3_H" -gt "2750" ]]; then
			wall -n "OVER-VOLTAGE: 5300 mV rail is now at $(cat $VOLTAGE/$VOLTAGE_5V3)mV"
		elif [[ "$VOLTAGE_5V3_H" -lt "2550" ]]; then
			wall -n "UNDER-VOLTAGE: 5300 mV rail is now at $(cat $VOLTAGE/$VOLTAGE_5V3)mV"
		fi
		
		if [[ "$VOLTAGE_5V5_H"  -gt "2850" ]]; then
			wall -n "OVER-VOLTAGE: 5500 mV rail is now at $(cat $VOLTAGE/$VOLTAGE_5V5)mV"
		elif [[ "$VOLTAGE_5V5_H"  -lt "2650" ]]; then
			wall -n "UNDER-VOLTAGE: 5500 mV rail is now at $(cat $VOLTAGE/$VOLTAGE_5V5)mV"
		fi
		
		if [[ "$VOLTAGE_3V6_H"  -gt "1850" ]]; then
			wall -n "OVER-VOLTAGE: 3600 mV rail is now at $(cat $VOLTAGE/$VOLTAGE_3V6)mV"
		elif [[ "$VOLTAGE_3V6_H"  -lt "1750" ]]; then
			wall -n "UNDER-VOLTAGE: 3600 mV rail is now at $(cat $VOLTAGE/$VOLTAGE_3V6)mV"
		fi
		
		if [[ "$VOLTAGE_3V3_H" -gt "1700" ]]; then
			wall -n "OVER-VOLTAGE: 3300 mV rail is now at $(cat $VOLTAGE/$VOLTAGE_3V3)mV"
		elif [[ "$VOLTAGE_3V3_H" -lt "1600" ]]; then
			wall -n "UNDER-VOLTAGE: 3300 mV rail is now at $(cat $VOLTAGE/$VOLTAGE_3V3)mV"
		fi
		
		if [[ "$TEMP_5V3_T" -gt $MAX_TEMP ]]; then
			wall -n "OVER-TEMPERATURE: Temperautre at 5300 mV regualator is $TEMP_5V3_T deg C"
		elif [[ "$TEMP_5V3_T" -lt $MIN_TEMP ]]; then
			wall -n "UNDER-TEMPERATURE: Temperautre at 5300 mV regualator is $TEMP_5V3_T deg C"
		fi

		if [[ "$TEMP_5V5_T" -gt $MAX_TEMP ]]; then
			wall -n "OVER-TEMPERATURE: Temperautre at 5500 mV regualator is $TEMP_5V5_T deg C"
		elif [[ "$TEMP_5V5_T" -lt $MIN_TEMP ]]; then
			wall -n "UNDER-TEMPERATURE: Temperautre at 5500 mV regualator is $TEMP_5V5_T deg C"
		fi
		
		if [[ "$TEMP_3V6_T" -gt $MAX_TEMP ]]; then
			wall -n "OVER-TEMPERATURE: Temperautre at 3600 mV regualator is $TEMP_3V6_T deg C"
		elif [[ "$TEMP_3V6_T" -lt $MIN_TEMP ]]; then
			wall -n "UNDER-TEMPERATURE: Temperautre at 3600 mV regualator is $TEMP_3V6_T deg C"
		fi
		
		if [[ "$TEMP_3V3_T" -gt $MAX_TEMP ]]; then
			wall -n "OVER-TEMPERATURE: Temperautre at 3300 mV regualator is $TEMP_3V3_T deg C"
		elif [[ "$TEMP_3V3_T" -lt $MIN_TEMP ]]; then
			wall -n "UNDER-TEMPERATURE: Temperautre at 3300 mV regualator is $TEMP_3V3_T deg C"
		fi
		sleep 5
	done
	;;
read)
	let VOLTAGE_5V3="$VOLTAGE_5V3_H*$CONST3"
	echo -e "$bold 5300 mV rail is measured at$bold $VOLTAGE_5V3 mV $normal"
	let VOLTAGE_5V5="$VOLTAGE_5V5_H*$CONST3"
	echo -e "$bold 5500 mV rail is measured at$bold $VOLTAGE_5V5 mV $normal"
	let VOLTAGE_3V6="$VOLTAGE_3V6_H*$CONST3"
	echo -e "$bold 3600 mV rail is measured at$bold $VOLTAGE_3V6 mV $normal"
	let VOLTAGE_3V3="$VOLTAGE_3V3_H*$CONST3"
	echo -e "$bold 3300 mV rail is measured at$bold $VOLTAGE_3V3 mV $normal"
	echo -e "$bold Temperautre at 5300 mV regualator: $TEMP_5V3_T deg C $normal"
	echo -e "$bold Temperautre at 5500 mV regualator: $TEMP_5V5_T deg C $normal"
	echo -e "$bold Temperautre at 3600 mV regualator: $TEMP_3V6_T deg C $normal"
	echo -e "$bold Temperautre at 3300 mV regualator: $TEMP_3V3_T deg C $normal"
	;;
*)
	echo -e "$bold Usage: ./sensors run|read $normal"
	echo -e "$bold setup: Run voltage and temperature in the background $normal"
	echo -e "$bold read: Read current main voltages and temperatures $normal"
	exit 1
	;;
esac
exit 0
