#! /bin/bash -e

red="\e[1;31m"
normal="\e[0m"
green="\e[1;32m"
bold="\e[1m"
yellow="\e[1;33m"
ok="[$green   OK   $normal]"
failed="[$red FAILED $normal]"
warning="[$yellow WARNING$normal]"

case "$1" in
stop)
	if [[ -z "$2" ]]; then
		echo "Service name cannot be empty"
		exit 1
	fi
	echo "Stopping system service $2..."
	systemctl stop $2
	rc=$?
	if [[ $rc != 0 ]]; then
		echo -e "$failed Failed to stop crimson services, exiting..."
		echo -e "$bold Try xx to fix the problem"
		exit $rc
	fi
	echo -e "$ok Done"
	;;

start)
	if [[ -z "$2" ]]; then
		echo "Service name cannot be empty"
		exit 1
	fi
	echo "Starting system service $2..."
	systemctl start $2
	rc=$?
	if [[ $rc != 0 ]]; then
		echo -e "$failed Failed to stop crimson services, exiting..."
		echo -e "$bold Try xx to fix the problem"
		exit $rc
	fi
	echo -e "$ok Done"
	;;

update_db)
	echo "Updating package manager database..."
	smart update
	rc=$?
	if [[ $rc != 0 ]]; then
		echo -e "$failed Failed to update package manager database, exiting..."
		echo -e "$bold Try xx to fix the problem"
		exit $rc
	fi
	echo -e "$ok Done"
	;;

remove)
	if [[ -z "$2" ]]; then
		echo "Package name cannot be empty"
		exit 1
	fi
	echo "Removing package $2..."
	smart remove $2
	rc=$?
	if [[ $rc != 0 ]]; then
		echo -e "$failed Failed to remove package $2, exiting..."
		echo -e "$bold Try xx to fix the problem"
		exit $rc
	fi
	echo -e "$ok Done"
	;;

install)
	if [[ -z "$2" ]]; then
		echo "Package name cannot be empty"
		exit 1
	fi
	echo "Installing package $2..."
	smart install $2
	rc=$?
	if [[ $rc != 0 ]]; then
		echo -e "$failed Failed to install package $2, exiting..."
		echo -e "$bold Try xx to fix the problem"
		exit $rc
	fi
	echo -e "$ok Done"
	;;

upgrade)
	if [[ -z "$2" ]]; then
		echo "Package name cannot be empty"
		exit 1
	fi
	echo "Upgrading package $2..."
	smart upgrade $2
	rc=$?
	if [[ $rc != 0 ]]; then
		echo -e "$failed Failed to upgrade package $2, exiting..."
		echo -e "$bold Try xx to fix the problem"
		exit $rc
	fi
	echo -e "$ok Done"
	;;

flash)
	if [[ -z "$2" ]]; then
		echo "Board name cannot be empty"
		exit 1
	fi
	if [[ "$2" == "dig" && "$3" == "soft" ]]; then
		echo "Flashing FPGA on $2..."
		cd /lib/firmware && ./update.sh soft
	elif [[ "$2" == "dig" && "$3" == "hard" ]]; then
		echo "Flashing FPGA and SD card on $2..."
		cd /lib/firmware && ./update.sh hard
	else
		echo "Flashing MCU on $2..."
		cd /lib/mcu && ./flash w $2 crimson
	fi
	rc=$?
	if [[ $rc != 0 ]]; then
		echo -e "$failed Failed to flash $2, exiting..."
		echo -e "$bold Try xx to fix the problem"
		exit $rc
	fi
	echo -e "$ok Done"
	;;

cleanup)
	if [[ "$2" != "crimson-server" ]]; then
		echo -e "$failed Only crimson-server cleanup function is supported"
		exit 1
	else
		echo "Cleaning up server..."
		umount /var/crimson/state &&
		rm -rf /var/crimson/state &&
		mkdir /var/crimson/state &&
		mount -t tmpfs -o size=50m tpmfs /var/crimson/state
	fi
	rc=$?
	if [[ $rc != 0 ]]; then
		echo -e "$failed Failed to cleanup server, exiting..."
		echo -e "$bold Try xx to fix the problem"
		exit $rc
	fi
	echo -e "$ok Done"
	;;

*)
	echo -e "$bold Usage: Under Construction $normal"
	exit 1
	;;

esac
exit 0
